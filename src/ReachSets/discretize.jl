const LDS = LinearDiscreteSystem
const CLCDS = ConstrainedLinearControlDiscreteSystem

@inline I(T, n) = Matrix{eltype(A)}(I, n, n)

"""
    discretize(ùëÜ, Œ¥; [approximation], [exp_method], [sih_method])

Apply an approximation model to `S` obtaining a discrete initial value problem.

### Input

- `ùëÜ`             -- initial value problem for a continuous affine ODE with
                     non-deterministic inputs
- `Œ¥`             -- step size
- `approximation` -- the method to compute the approximation model for the
                     discretization, choose among:

    - `"forward"`    -- use forward-time interpolation
    - `"backward"`   -- use backward-time interpolation
    - `"firstorder"` -- use first-order approximation of the ODE
    - `"nobloating"` -- do not bloat the initial states

- `exp_method`  -- (optional, default: `"base"`) the method used to take the matrix
                    exponential of the coefficient matrix, choose among:

    - `"base"` -- the scaling and squaring method implemented in Julia base,
                  see `?exp` for details
    - `"pade"` -- use Pade approximant method to compute matrix exponentials of
                  sparse matrices, implemented in `Expokit`
    - `"lazy"` -- compute a wrapper type around the matrix exponential, i.e. using
                  the lazy implementation `SparseMatrixExp` from `LazySets` and
                  the evaluation of the action of the matrix exponential using the
                  `expmv` implementation from `Expokit`

- `sih_method`  -- (optional, default: `"lazy"`) the method used to take the
                    symmetric interval hull operation, choose among:

    - `"concrete"` -- compute the full symmetric interval hull using the function
                      `symmetric_interval_hull` from `LazySets.Approximations`
    - `"lazy"`     -- compute a wrapper set type around symmetric interval hull
                      in a lazy way using `SymmetricIntervalHull`

### Output

The initial value problem of a discrete system.

### Algorithm

Let ``ùëÜ : x' = Ax(t) + u(t)``, ``x(0) ‚àà \\mathcal{X}_0``, ``u(t) ‚àà U`` be the
given continuous affine ODE `ùëÜ`, where `U` is the set of non-deterministic inputs
and ``\\mathcal{X}_0`` is the set of initial states. Recall that the system
`ùëÜ` is called homogeneous whenever `U` is the empty set.

Given a step size ``Œ¥``, this function computes a set, `Œ©‚ÇÄ`, that guarantees to
contain all the trajectories of ``ùëÜ`` starting at any ``x(0) ‚àà \\mathcal{X}_0``
and for any input function that satisfies ``u(t) ‚àà U``, for any ``t ‚àà [0, Œ¥]``.

The initial value problem returned by this function consists of the set `Œ©‚ÇÄ`
together with the coefficient matrix ``œï = e^{AŒ¥}`` and a transformed
set of inputs if `U` is non-empty.

In the literature, the method to obtain `Œ©‚ÇÄ` is called the *approximation model*
and different alternatives have been proposed. See the argument `approximation`
for available options. For the reference to the original papers, see the docstring
of each method.

In the dense-time case, the transformation described is such that the trajectories
of the given continuous system are included in the computed flowpipe of the
discretized system.

In the discrete-time case, there is no bloating of the initial states and the
input is assumed to remain constant between sampled times. Use the option
`approximation="nobloating"` for this setting.

Several methods to compute the matrix exponential are availabe. Use `exp_method`
to select one. For very large systems (~10000√ó10000), computing the full matrix
exponential is very expensive hence it is preferable to compute the action
of the matrix exponential over vectors when needed. Use the option
`exp_method="lazy"` for this.
"""
function discretize(ùëÜ::InitialValueProblem{<:AbstractContinuousSystem},
                    Œ¥::Float64;
                    approximation::String="forward",
                    exp_method::String="base",
                    sih_method::String="lazy")

    if approximation in ["forward", "backward"]
        return _discretize_interpolation(ùëÜ, Œ¥, approximation=approximation,
                    exp_method=exp_method, sih_method=sih_method)
    elseif approximation == "firstorder"
        return _discretize_firstorder(ùëÜ, Œ¥, exp_method=exp_method)
    elseif approximation == "nobloating"
        return _discretize_nobloating(ùëÜ, Œ¥, exp_method=exp_method)
    else
        throw(ArgumentError("the approximation model $approximation is unknown"))
    end
end

"""
    exp_AŒ¥(A::AbstractMatrix, Œ¥::Float64; [exp_method])

Compute the matrix exponential ``e^{AŒ¥}``.

### Input

- `A`           -- coefficient matrix
- `Œ¥`           -- step size
- `exp_method`  -- (optional, default: `"base"`) the method used to take the matrix
                    exponential of the coefficient matrix, choose among:

    - `"base"` -- the scaling and squaring method implemented in Julia base,
                  see `?exp` for details
    - `"pade"` -- use Pade approximant method to compute matrix exponentials of
                  sparse matrices, as implemented in `Expokit`
    - `"lazy"` -- compute a wrapper type around the matrix exponential, i.e. using
                  the lazy implementation `SparseMatrixExp` from `LazySets` and
                  evaluation of the action of the matrix exponential using the
                  `expmv` implementation in `Expokit`

### Output

A matrix.
"""
function exp_AŒ¥(A::AbstractMatrix{Float64}, Œ¥::Float64; exp_method="base")
    if exp_method == "base"
        return expmat(Matrix(A*Œ¥))
    elseif exp_method == "lazy"
        return SparseMatrixExp(A*Œ¥)
    elseif exp_method == "pade"
        return padm(A*Œ¥)
    else
       throw(ArgumentError("the exponentiation method $exp_method is unknown"))
    end
end

"""
    œï‚ÇÅ(A, Œ¥; [exp_method])

TODO: Add doctring

### Input

- `A`           -- coefficient matrix
- `Œ¥`           -- step size
- `exp_method`  -- (optional, default: `"base"`) the method used to take the matrix
                    exponential of the coefficient matrix, choose among:

    - `"base"` -- the scaling and squaring method implemented in Julia base,
                  see `?exp` for details
    - `"pade"` -- use Pade approximant method to compute matrix exponentials of
                  sparse matrices, as implemented in `Expokit`
    - `"lazy"` -- compute a wrapper type around the matrix exponential, i.e. using
                  the lazy implementation `SparseMatrixExp` from `LazySets` and
                  evaluation of the action of the matrix exponential using the
                  `expmv` implementation in `Expokit`

### Output

A matrix.
"""
function œï‚ÇÅ(A, Œ¥; exp_method="base")
    n = size(A, 1)
    if exp_method == "base"
        P = expmat(Matrix([A*Œ¥     sparse(Œ¥*I, n, n)  spzeros(n, n);
                   spzeros(n, 2*n) sparse(Œ¥*I, n, n);
                   spzeros(n, 3*n)]))
        œï‚ÇÅ_AŒ¥ = P[1:n, (n+1):2*n]

    elseif exp_method == "lazy"
        P = SparseMatrixExp([A*Œ¥ sparse(Œ¥*I, n, n) spzeros(n, n);
                             spzeros(n, 2*n) sparse(Œ¥*I, n, n);
                             spzeros(n, 3*n)])
        œï‚ÇÅ_AŒ¥ = sparse(get_columns(P, (n+1):2*n)[1:n, :])

    elseif exp_method == "pade"
        P = padm([A*Œ¥ sparse(Œ¥*I, n, n) spzeros(n, n);
                  spzeros(n, 2*n) sparse(Œ¥*I, n, n);
                  spzeros(n, 3*n)])
       œï‚ÇÅ_AŒ¥ = P[1:n, (n+1):2*n]

    else
       throw(ArgumentError("the exponentiation method $exp_method is unknown"))
    end

     return œï‚ÇÅ_AŒ¥
end

"""
    œï‚ÇÇ(A, Œ¥; [exp_method])

TODO: Add doctring

### Input

- `A`           -- coefficient matrix
- `Œ¥`           -- step size
- `exp_method`  -- (optional, default: `"base"`) the method used to take the matrix
                    exponential of the coefficient matrix, choose among:

    - `"base"` -- the scaling and squaring method implemented in Julia base,
                  see `?exp` for details
    - `"pade"` -- use Pade approximant method to compute matrix exponentials of
                  sparse matrices, as implemented in `Expokit`
    - `"lazy"` -- compute a wrapper type around the matrix exponential, i.e. using
                  the lazy implementation `SparseMatrixExp` from `LazySets` and
                  evaluation of the action of the matrix exponential using the
                  `expmv` implementation in `Expokit`

### Output

A matrix.
"""
function œï‚ÇÇ(A, Œ¥; exp_method="base")
    n = size(A, 1)
    if exp_method == "base"
        P = expmat(Matrix([A*Œ¥ sparse(Œ¥*I, n, n) spzeros(n, n);
                   spzeros(n, 2*n) sparse(Œ¥*I, n, n);
                   spzeros(n, 3*n)]))
        œï‚ÇÇ_AŒ¥ = P[1:n, (2*n+1):3*n]

    elseif exp_method == "lazy"
        P = SparseMatrixExp([A*Œ¥ sparse(Œ¥*I, n, n) spzeros(n, n);
                             spzeros(n, 2*n) sparse(Œ¥*I, n, n);
                             spzeros(n, 3*n)])
        œï‚ÇÇ_AŒ¥ = sparse(get_columns(P, (2*n+1):3*n)[1:n, :])

    elseif exp_method == "pade"
        P = padm([A*Œ¥ sparse(Œ¥*I, n, n) spzeros(n, n);
                  spzeros(n, 2*n) sparse(Œ¥*I, n, n);
                  spzeros(n, 3*n)])
        œï‚ÇÇ_AŒ¥ = P[1:n, (2*n+1):3*n]

    else
       throw(ArgumentError("the exponentiation method $exp_method is unknown"))
    end

    return œï‚ÇÇ_AŒ¥
end

"""
    _discretize_firstorder(ùëÜ, Œ¥; [p], [exp_method])

Apply a first-order approximation model to `S` obtaining a discrete initial value problem.

### Input

- `ùëÜ`           -- initial value problem for a continuous affine ODE with
                   non-deterministic inputs
- `Œ¥`           -- step size
- `p`           -- (optional, default: `Inf`) parameter in the considered norm
- `exp_method`  -- (optional, default: `base`) the method used to take the matrix
                   exponential of the coefficient matrix, choose among:

    - `base` -- the scaling and squaring method implemented in Julia base,
                see `?exp` for details
    - `pade` -- use Pade approximant method to compute matrix exponentials of
                sparse matrices, as implemented in `Expokit`
    - `lazy` -- compute a wrapper type around the matrix exponential, i.e. using
                the lazy implementation `SparseMatrixExp` from `LazySets` and
                evaluation of the action of the matrix exponential using the
                `expmv` implementation in `Expokit`

### Output

The initial value problem for a discrete system.

### Algorithm

Let us define some notation. Let ``ùëÜ : x' = Ax(t) + u(t)``,
``x(0) ‚àà \\mathcal{X}_0``, ``u(t) ‚àà U`` be the given continuous affine ODE `ùëÜ`,
where `U` is the set of non-deterministic inputs and ``\\mathcal{X}_0`` is the set
of initial states.

Let ``R_{\\mathcal{X}_0} = \\max_{x ‚àà \\mathcal{X}_0} ‚Äñx‚Äñ``,
`D_{\\mathcal{X}_0} = \\max_{x, y ‚àà \\mathcal{X}_0} ‚Äñx-y‚Äñ`` and
``R_{V} = \\max_{u ‚àà U} ‚Äñu‚Äñ``.

Let ``Œ©‚ÇÄ`` be the set defined as:
```math
Œ©‚ÇÄ = ConvexHull(\\mathcal{X}_0, e^{Œ¥A}\\mathcal{X}_0 ‚äï Œ¥U ‚äï Œ±B_p)
```
where ``Œ± = (e^{Œ¥ ‚ÄñA‚Äñ} - 1 - Œ¥‚ÄñA‚Äñ)*R_{\\mathcal{X}_0} + R_{U} / ‚ÄñA‚Äñ)`` and ``B_p`` denotes
the unit ball for the considered norm.

It is proved in [Lemma 1, 1] that the set of states reachable by ``S`` in the time
interval ``[0, Œ¥]``, that we denote ``R_{[0,Œ¥]}(\\mathcal{X}_0)``,
is included in ``Œ©‚ÇÄ``:

```math
R_{[0,Œ¥]}(\\mathcal{X}_0) ‚äÜ Œ©‚ÇÄ.
```

Moreover, if `d_H(A, B)` denotes the Hausdorff distance between the sets ``A``
and ``B`` in ``\\mathbb{R}^n``, then

```math
d_H(Œ©‚ÇÄ, R_{[0,Œ¥]}(\\mathcal{X}_0)) ‚â§ \\frac{1}{4}(e^{Œ¥ ‚ÄñA‚Äñ} - 1) D_{\\mathcal{X}_0} + 2Œ±.
```

### Notes

In this implementation, the infinity norm is used by default. To use other norms
substitute `BallInf` with the ball in the appropriate norm. However, note that
not all norms are supported; see the documentation of `?norm` in `LazySets` for
details.

See also [`discr_bloat_interpolation`](@ref) for an alternative algorithm that
uses less conservative bounds.

[1] Le Guernic, C., & Girard, A., 2010, *Reachability analysis of linear systems
using support functions. Nonlinear Analysis: Hybrid Systems, 4(2), 250-262.*
"""
function _discretize_firstorder(ùëÜ::InitialValueProblem,
                                Œ¥::Float64;
                                p::Float64=Inf,
                                exp_method::String="base")

    # unwrap coefficient matrix and initial states
    A, X0 = ùëÜ.s.A, ùëÜ.x0 

    # system size; A is assumed square
    n = size(A, 1)

    Anorm = norm(Matrix(A), p)
    RX0 = norm(X0, p)

    # compute exp(A*Œ¥)
    œï = exp_AŒ¥(A, Œ¥, exp_method)

    if islinear(ùëÜ) # inputdim(ùëÜ) == 0
        Œ± = (exp(Œ¥*Anorm) - 1. - Œ¥*Anorm) * RX0
        ‚ñ° = Ballp(p, zeros(n), Œ±)
        Œ©0 = ConvexHull(X0, œï * X0 ‚äï ‚ñ°)
        return IVP(LDS(œï), Œ©0)
    elseif isaffine(ùëÜ)
        Uset = inputset(ùëÜ)
        if Uset isa ConstantInput
            U = next_set(Uset)
            RU = norm(U, Inf)
            Œ± = (exp(Œ¥*Anorm) - 1.0 - Œ¥*Anorm)*(RX0 + RU/Anorm)
            Œ≤ = (exp(Œ¥*Anorm) - 1.0 - Œ¥*Anorm)*RU/Anorm
            ‚ñ°Œ± = Ballp(p, zeros(n), Œ±)
            ‚ñ°Œ≤ = Ballp(p, zeros(n), Œ≤)
            Œ©0 = ConvexHull(X0, œï * X0 ‚äï Œ¥ * U + ‚ñ°Œ±)
            Ud = map(u -> Œ¥*u ‚äï ‚ñ°Œ≤, U)
            return IVP(CLCDS(œï, I(typeof(A), n), nothing, Ud), Œ©0)

        elseif Uset isa VaryingInput
            Ud = Vector{LazySet}(undef, length(Uset)) # TODO: concrete type of Uset
            for (i, Ui) in enumerate(Uset)
                RU = norm(Ui, p)
                Œ± = (exp(Œ¥*Anorm) - 1.0 - Œ¥*Anorm)*(RX0 + RU/Anorm)
                Œ≤ = (exp(Œ¥*Anorm) - 1.0 - Œ¥*Anorm)*RU/Anorm
                ‚ñ°Œ± = Ballp(p, zeros(n), Œ±)
                ‚ñ°Œ≤ = Ballp(p, zeros(n), Œ≤)
                Œ©0 = ConvexHull(X0, œï * X0 ‚äï Œ¥ * Ui ‚äï ‚ñ°Œ±)
                Ud[i] =  Œ¥ * Ui ‚äï ‚ñ°Œ≤
            end
            Ud = VaryingInput(Ud)
            return IVP(CLCDS(œï, I(typeof(œï), n), nothing, Ud), Œ©0)
        end
    else
        throw(ArgumentError("this function only applies to linear or affine systems"))
    end
end

"""
    _discretize_nobloating(ùëÜ, Œ¥; [exp_method])

Discretize a continuous system without bloating of the initial states, suitable
for discrete-time reachability.

## Input

- `ùëÜ`          -- a continuous system
- `Œ¥`          -- step size
- `exp_method` -- (optional, default: `"base"`) the method used to take the matrix
                   exponential of the coefficient matrix, choose among:

    - `"base"` -- the scaling and squaring method implemented in Julia base,
                  see `?exp` for details
    - `"pade"` -- use Pade approximant method to compute matrix exponentials of
                  sparse matrices, as implemented in `Expokit`
    - `"lazy"` -- compute a wrapper type around the matrix exponential, i.e. using
                  the lazy implementation `SparseMatrixExp` from `LazySets` and
                  evaluation of the action of the matrix exponential using the
                  `expmv` implementation in `Expokit`

## Output

A discrete system.

## Algorithm

The transformation implemented here is the following:

- `A -> Phi := exp(A*delta)`
- `U -> V := M*U`
- `X0 -> X0hat := X0`

where `M` corresponds to `Phi1(A, delta)` in Eq. (8) of *SpaceEx: Scalable
Verification of Hybrid Systems.*

In particular, there is no bloating, i.e. we don't bloat the initial states and
dont multiply the input by the step size Œ¥, as required for the dense time case.
"""
function  _discretize_nobloating(ùëÜ::InitialValueProblem{<:AbstractContinuousSystem},
                                 Œ¥::Float64;
                                 exp_method::String="base")

    # unrwap coefficient matrix and initial states
    A, X0 = ùëÜ.s.A, ùëÜ.x0

    # compute matrix œï = exp(AŒ¥)
    œï = exp_AŒ¥(A, Œ¥, lazy_expm, pade_expm)

    # early return for homogeneous systems
    if islinear(ùëÜ)
        Œ©0 = X0
        return IVP(LDS(œï), Œ©0)
    end

    U = inputset(ùëÜ)
    inputs = next_set(U, 1)

    # compute matrix to transform the inputs
    Phi1Adelta = œï‚ÇÅ(A, Œ¥, exp_method)

    discretized_U = Phi1Adelta * inputs

    Œ©0 = X0

    if U isa ConstantInput
        return DiscreteSystem(œï, Œ©0, discretized_U)
    else
        discretized_U = VaryingInput([Phi1Adelta * Ui for Ui in U])
        return DiscreteSystem(œï, Œ©0, discretized_U)
    end
end

"""
    _discretize_interpolation(ùëÜ, Œ¥, [approximation], [exp_method], [sih_method])

Compute bloating factors using forward or backward interpolation.

## Input

- `cs`            -- a continuous system
- `Œ¥`             -- step size
- `approximation` -- choose the approximation model among `"forward"` and
                     `"backward"`
- `exp_method`    -- (optional, default: `"base"`) the method used to take the matrix
                     exponential of the coefficient matrix, choose among:

    - `"base"`    -- the scaling and squaring method implemented in Julia base,
                     see `?exp` for details
    - `"pade"`    -- use Pade approximant method to compute matrix exponentials of
                     sparse matrices, as implemented in `Expokit`
    - `"lazy"`    -- compute a wrapper type around the matrix exponential, i.e. using
                     the lazy implementation `SparseMatrixExp` from `LazySets` and
                     evaluation of the action of the matrix exponential using the
                     `expmv` implementation in `Expokit`

- `sih_method`    -- (optional, default: `"lazy"`) the method used to take the
                     symmetric interval hull operation, choose among:

    - `"concrete"` -- compute the full symmetric interval hull
    - `"lazy"`     -- compute a wrapper set type around symmetric interval hull in a
                      lazy way

## Algorithm

See Frehse et al., CAV'11, *SpaceEx: Scalable Verification of Hybrid Systems*,
Lemma 3.

Note that in the unlikely case that A is invertible, the result can also
be obtained directly, as a function of the inverse of A and `e^{At} - I`.

The matrix `P` is such that: `œïAabs = P[1:n, 1:n]`,
`Phi1Aabsdelta = P[1:n, (n+1):2*n]`, and `Phi2Aabs = P[1:n, (2*n+1):3*n]`.
"""
function _discretize_interpolation(ùëÜ::InitialValueProblem{<:AbstractContinuousSystem},
                                   Œ¥::Float64;
                                   approximation::String="forward",
                                   exp_method::String="base",
                                   sih_method::String="lazy")

    if sih_method == "lazy"
        sih = SymmetricIntervalHull
    elseif sih_method == "concrete"
        sih = symmetric_interval_hull
    else
        throw(ArgumentError("the method $sih_method is unknown"))
    end

    # unrwap coefficient matrix and initial states
    A, X0 = ùëÜ.s.A, ùëÜ.x0

    # compute matrix œï = exp(AŒ¥)
    œï = exp_AŒ¥(A, Œ¥, lazy_expm, pade_expm)

    # early return for homogeneous systems
    if islinear(ùëÜ)
        Œ©0 = ConvexHull(X0, œï * X0 ‚äï E)
        return IVP(LDS(œï), Œ©0)
    end
    U = inputset(ùëÜ)
    inputs = next_set(U, 1)

    # compute the transformation matrix to bloat the initial states
    Phi2Aabs = œï‚ÇÇ_AŒ¥(abs.(A), Œ¥, exp_method=exp_method)

    if isa(inputs, ZeroSet)
        if approximation == "forward" || approximation == "backward"
            Œ©0 = ConvexHull(X0, œï * X0 + Œ¥ * inputs)
        end
    else
        EPsi = sih(Phi2Aabs * sih(A * inputs))
        discretized_U = Œ¥ * inputs + EPsi
        if approximation == "forward"
            EOmegaPlus = sih(Phi2Aabs * sih((A * A) * X0))
            Œ©0 = ConvexHull(X0, œï * X0 + discretized_U + EOmegaPlus)
        elseif approximation == "backward"
            EOmegaMinus = sih(Phi2Aabs * sih((A * A * œï) * X0))
            Œ©0 = ConvexHull(X0, œï * X0 + discretized_U + EOmegaMinus)
        end
    end

    if U isa ConstantInput
        return DiscreteSystem(œï, Œ©0, discretized_U)
    else
        discretized_U = [Œ¥ * Ui + sih(Phi2Aabs * sih(A * Ui)) for Ui in U]
        return DiscreteSystem(œï, Œ©0, discretized_U)
    end
end
